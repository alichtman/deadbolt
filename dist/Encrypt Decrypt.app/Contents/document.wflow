<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.42</string>
	<key>AMApplicationVersion</key>
	<string>2.9</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>-- Easy File/Folder Encryption and Decryption with openssl-- Written by: Aaron Lichtman &lt;aaronlichtman@gmail.com&gt;-------------- Globals / Constants------------global encryptedExtensionset encryptedExtension to ".encrypted"global cdToRightDir--------------------- Helper Functions--------------------- https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateText.htmlon findAndReplaceInText(theText, theSearchString, theReplacementString)	set AppleScript's text item delimiters to theSearchString	set theTextItems to every text item of theText	set AppleScript's text item delimiters to theReplacementString	set theText to theTextItems as string	set AppleScript's text item delimiters to ""	return theTextend findAndReplaceInText-- Make sure openssl is installed.on checkOpenSSLInstallation()	try		do shell script "which openssl"	on error		display dialog "Encrypt/Decrypt Error: openssl can't be found on your
						system. Make sure it's installed and on your $PATH."		return	end tryend checkOpenSSLInstallation-- Returns true if the path exists as either a file or directoryon checkIfFileExists(path)	try		do shell script cdToRightDir &amp; "test -e " &amp; path	on error		return false	end try	return trueend checkIfFileExistson removeFile(path)	log "Removing: " &amp; path	do shell script cdToRightDir &amp; "rm " &amp; pathend removeFile-- Removes zip archive if we created it and then exitson cleanUpAndExit(isEncryptingDir, zipAlreadyExistedFlag, zipPath)	if isEncryptingDir and not zipAlreadyExistedFlag then		removeFile(zipPath)	end if	-- User Exit	error number -128end cleanUpAndExit-- Returns the SHA1 sum of the filePath passed inon hashFile(filePath)	log "Hashing " &amp; filePath	return do shell script cdToRightDir &amp; "openssl sha1 " &amp; filePath &amp; " | cut -d' ' -f2"end hashFile-- Prompt for passphrase, enter it and verify decryption. If it's a ZIP, auto-extract and delete ZIP.on decryptFile(filePath)	log "Decrypting: " &amp; filePath	set decryptionKey to the text returned of (display dialog "Enter a decryption password:" default answer "")	-- Extract file hash from filename for decryption success verification	set originalHash to do shell script "echo " &amp; filePath &amp; " | rev | cut -d'.' -f 2 | rev"	log "Original Hash: " &amp; originalHash	set unencryptedFilePath to quoted form of findAndReplaceInText(filePath, "." &amp; originalHash &amp; encryptedExtension, "")	--  Detect decryption failures with a checksum (#1) At the moment, we are printing success every single time, even when the password is incorrect.	log "openssl enc -d -aes-256-ctr -salt -in " &amp; quoted form of filePath &amp; " -out " &amp; unencryptedFilePath &amp; " -pass pass:" &amp; decryptionKey	do shell script "openssl enc -d -aes-256-ctr -salt -in " &amp; quoted form of filePath &amp; " -out " &amp; unencryptedFilePath &amp; " -pass pass:" &amp; decryptionKey		if hashFile(unencryptedFilePath) is not equal to originalHash then		display dialog "ERROR: Decryption failure for file: " &amp; filePath		do shell script cdToRightDir &amp; "rm " &amp; unencryptedFilePath		return	else		display dialog "Successful decryption!"	end if		-- If it's a zip, auto decompress it and remove the zip	set decryptedFileType to do shell script cdToRightDir &amp; "file " &amp; unencryptedFilePath &amp; " | sed 's/^.*: //' | cut -d' ' -f1"	log "Decrypted File Type: " &amp; decryptedFileType	if decryptedFileType is equal to "Zip" then		do shell script cdToRightDir &amp; " unzip -u " &amp; unencryptedFilePath		removeFile(unencryptedFilePath)	end ifend decryptFile--------- Main-------checkOpenSSLInstallation()tell application "Finder" to set selected_items to selectionrepeat with itemRef in selected_items	set filePath to POSIX path of (itemRef as string)	set quotedAndEscapedPath to quoted form of findAndReplaceInText(filePath, " ", "\\\\")	log "FilePath: " &amp; filePath	set parentDir to do shell script "dirname " &amp; quotedAndEscapedPath	log "ParentDir: " &amp; parentDir	set fileType to do shell script "file " &amp; quotedAndEscapedPath &amp; " | sed 's/^.*: //'"	log "Filetype: " &amp; fileType	set cdToRightDir to "cd " &amp; quoted form of (parentDir) &amp; " &amp;&amp; "		-- If file is already encrypted, decrypt it.	if fileType is equal to "openssl enc'd data with salted password" then		decryptFile(filePath)	else		-- If it's not already encrypted, encrypt it.		set fileToBeEncrypted to filePath		set zipAlreadyExistedFlag to false		set isEncryptingDir to false				-- If the filePath is a folder, compress it into a zip file.		if kind of (info for filePath) is "folder" then			set isEncryptingDir to true			log "Encrypting Directory..."			log "Created: " &amp; fileToBeEncrypted			set dirToBeZipped to findAndReplaceInText(text 1 through -2 of filePath, parentDir &amp; "/", "")			log "DirToBeZipped: " &amp; dirToBeZipped			log "cdToRightDir: " &amp; cdToRightDir			set fileToBeEncrypted to dirToBeZipped &amp; ".zip"			set quotedFileToBeEncrypted to quoted form of (fileToBeEncrypted)			set zipAlreadyExistedFlag to checkIfFileExists(quotedFileToBeEncrypted)			set zipCommand to cdToRightDir &amp; "zip -r " &amp; quotedFileToBeEncrypted &amp; " " &amp; quoted form of (dirToBeZipped &amp; "/")			log "Zip Command: " &amp; zipCommand			do shell script zipCommand		end if				set encryptedFileName to fileToBeEncrypted &amp; "." &amp; hashFile(fileToBeEncrypted) &amp; encryptedExtension				-- TODO: Remove ZIP if user exits at either of these prompts		set encryptionKey to the text returned of (display dialog "Enter an encryption password for file: " &amp; fileToBeEncrypted default answer "")		set encryptionKeyConfirmation to the text returned of (display dialog "Enter the password again: " default answer "")				if encryptionKey is not equal to encryptionKeyConfirmation then			display dialog "ERROR: Encryption passwords did not match."			log "ERROR: Passwords didn't match"			return		end if				log "openssl enc -aes-256-ctr -salt -in " &amp; fileToBeEncrypted &amp; " -out " &amp; encryptedFileName &amp; " -pass pass:" &amp; encryptionKey		do shell script cdToRightDir &amp; "openssl enc -aes-256-ctr -salt -in " &amp; fileToBeEncrypted &amp; " -out " &amp; encryptedFileName &amp; " -pass pass:" &amp; encryptionKey		display dialog "Created " &amp; encryptedFileName		cleanUpAndExit(isEncryptingDir, zipAlreadyExistedFlag, fileToBeEncrypted)	end ifend repeat</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>128A615A-9142-40A4-97A2-ED1B7FEECDE3</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>CB06710A-AE2C-4EEA-8CFA-84B1EDA971E7</string>
				<key>ShowWhenRun</key>
				<false/>
				<key>UUID</key>
				<string>9A1A5A9F-F633-45D3-AE8C-DB1CABA4AC11</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>505.250000:315.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
