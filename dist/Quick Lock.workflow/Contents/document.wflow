<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.42</string>
	<key>AMApplicationVersion</key>
	<string>2.9</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>-- Quick Lock v1.3-- Easy File/Folder Encryption and Decryption with openssl-- Written by: Aaron Lichtman &lt;aaronlichtman@gmail.com&gt;-- Notes to anyone editing this script:-- Watch the quoting of paths. Unlike bash, AppleScript chokes on paths that are quoted more than once, so you can't just throw a pair of quotes around a path randomly.------------------------ Globals / Constants----------------------global encryptedExtensionglobal cdToRightDirglobal configFileset configFile to POSIX path of (path to home folder) &amp; ".encrypt-decrypt.plist"--------------------- Helper Functions--------------------- https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateText.htmlon findAndReplaceInText(theText, theSearchString, theReplacementString)	set AppleScript's text item delimiters to theSearchString	set theTextItems to every text item of theText	set AppleScript's text item delimiters to theReplacementString	set theText to theTextItems as string	set AppleScript's text item delimiters to ""	return theTextend findAndReplaceInText-- TODO: Is this the proper way to do that?on userExit()	error number -128end userExiton readValueFromConfig(key)	tell application "System Events"		tell property list file configFile			return value of property list item key		end tell	end tellend readValueFromConfig-- Returns true if the path exists as either a file or directoryon checkIfFileExists(path)	try		do shell script cdToRightDir &amp; "test -e " &amp; path	on error		return false	end try	return trueend checkIfFileExistson removeFile(path)	log "Removing: " &amp; path	do shell script cdToRightDir &amp; "rm " &amp; pathend removeFileon decompressAndRemoveZip(filePath)	-- If it's a zip, auto decompress it and remove the zip	set decryptedFileType to getFileType(filePath)	log "Decrypted File Type: " &amp; decryptedFileType	if decryptedFileType starts with "Zip" then		do shell script cdToRightDir &amp; " unzip -u " &amp; filePath		removeFile(filePath)	end ifend decompressAndRemoveZip-- Removes zip archive if we created it and then exits. zipPath should be quoted already.on cleanUpAndExit(isEncryptingDirFlag, zipAlreadyExistedFlag, zipPath)	log "Cleaning up and exiting."	if isEncryptingDirFlag and not zipAlreadyExistedFlag then		removeFile(zipPath)	end if	userExit()end cleanUpAndExit-- Returns the SHA1 sum of the filePath passed in. filePath should be quoted alreadyon hashFile(filePath)	set hashCommand to cdToRightDir &amp; "openssl sha1 " &amp; filePath &amp; " | rev | cut -d' ' -f1 | rev"	log "Hash command: $ " &amp; hashCommand	set hash to do shell script hashCommand	log "Hashing: " &amp; filePath &amp; " -&gt; " &amp; hash	return hashend hashFileon getFileType(escapedFilePath)	set fileType to do shell script "file " &amp; escapedFilePath &amp; " | sed 's/^.*: //'"	log "Detected fileType: " &amp; fileType	return fileTypeend getFileTypeon changeFileIcon(encryptedFileName)	set appPath to "/Applications/Quick\\ Lock.app/Contents/"	set pngIconFile to appPath &amp; "/Resources/EncryptedFileIcon.png"	log "PNG Icon File: " &amp; pngIconFile	set changeFileScript to appPath &amp; "/MacOS/set-custom-icon.sh"	log "Change File Script: " &amp; changeFileScript	set encryptedFileNameTrimmed to text 2 through -2 of encryptedFileName	log "Encrypted File Trimmed: " &amp; encryptedFileNameTrimmed	set changeFileIconCommand to cdToRightDir &amp; changeFileScript &amp; " " &amp; pngIconFile &amp; " " &amp; encryptedFileNameTrimmed	log "Change File Icon Command: $ " &amp; changeFileIconCommand	do shell script changeFileIconCommandend changeFileIcon-- Prompt for passphrase, enter it and verify decryption. If it's a ZIP, auto-extract and delete ZIP.on decryptFile(encryptedFilePath)	log "Decrypting: " &amp; encryptedFilePath	set decryptionKey to the text returned of (display dialog "Enter a decryption password:" default answer "")		-- Extract file hash from filename for decryption success verification	set originalHash to do shell script "echo " &amp; encryptedFilePath &amp; " | rev | cut -d'.' -f 2 | rev"	log "Original Hash: " &amp; originalHash	set unencryptedFilePath to quoted form of findAndReplaceInText(encryptedFilePath, "." &amp; originalHash &amp; encryptedExtension, "")	log "Unencryoted FilePath: " &amp; unencryptedFilePath	-- Decrypt the file	set quotedEncryptedFilePath to quoted form of encryptedFilePath	log "Decryption Command: $ openssl enc -d -aes-256-ctr -salt -in " &amp; quotedEncryptedFilePath &amp; " -out " &amp; unencryptedFilePath &amp; " -pass pass:" &amp; decryptionKey	do shell script "openssl enc -d -aes-256-ctr -salt -in " &amp; quotedEncryptedFilePath &amp; " -out " &amp; unencryptedFilePath &amp; " -pass pass:" &amp; decryptionKey		-- Detect decryption failures by comparing the checksums	set newHash to hashFile(unencryptedFilePath)	if newHash is not equal to originalHash then		log "Potential decryption error. Original hash (" &amp; originalHash &amp; ") does not match New Hash (" &amp; newHash &amp; ")"		-- Prompt to see if they want to continue when a hash-mismatch is detected.		-- The only time this should be continued through is when decrypting a file without a hash.		set potentialErrorPrompt to (display dialog "Potential decryption error. If the file you are trying to decrypt is missing a SHA1 hash, click 'Continue'. Otherwise, click 'Abort'" buttons {"Abort", "Continue"} default button "Continue")		if button returned of potentialErrorPrompt = "Abort" then			log "Aborting decryption."			removeFile(unencryptedFilePath)			userExit()		end if	else		log "Successful decryption!"		display dialog "Successful decryption!"				-- If the option to remove encrypted files after decrypting is set, remove the file		if readValueFromConfig("deleteEncryptedFileAfterDecryption") is equal to true then			log "Removing encrypted file after successful decryption."			removeFile(quotedEncryptedFilePath)		else			log "Not removing encrypted file after successful decryption."		end if	end if		decompressAndRemoveZip(unencryptedFilePath)end decryptFileon encryptFile(filePath, parentDir)	set fileToBeEncrypted to filePath	set zipAlreadyExistedFlag to false	set isEncryptingDirFlag to false		-- If the filePath is a folder, compress it into a zip file.	if kind of (info for filePath) is "folder" then		set isEncryptingDirFlag to true		log "Encrypting Directory."		set dirToBeZipped to findAndReplaceInText(text 1 through -2 of filePath, parentDir &amp; "/", "")		log "DirToBeZipped: " &amp; dirToBeZipped		log "Created: " &amp; fileToBeEncrypted		set fileToBeEncrypted to dirToBeZipped &amp; ".zip"		set quotedFileToBeEncrypted to quoted form of fileToBeEncrypted		set zipAlreadyExistedFlag to checkIfFileExists(quotedFileToBeEncrypted)		set zipCommand to cdToRightDir &amp; "zip -r " &amp; quotedFileToBeEncrypted &amp; " " &amp; quoted form of (dirToBeZipped &amp; "/")		log "Zip Command: $ " &amp; zipCommand		do shell script zipCommand	else		set quotedFileToBeEncrypted to quoted form of filePath	end if		-- Remove ZIP if user exits at either of these prompts	set encryptionKeyPrompt to (display dialog "Enter an encryption password for file: " &amp; fileToBeEncrypted buttons {"Cancel Encryption", "Ok"} default answer "" default button "Ok")	if button returned of encryptionKeyPrompt = "Cancel Encryption" then		log "Aborting encryption at first password prompt."		cleanUpAndExit(isEncryptingDirFlag, zipAlreadyExistedFlag, quotedFileToBeEncrypted)	end if		set encryptionKeyConfirmationPrompt to (display dialog "Confirm the password: " &amp; fileToBeEncrypted buttons {"Cancel Encryption", "Ok"} default answer "" default button "Ok")	if button returned of encryptionKeyConfirmationPrompt = "Cancel Encryption" then		log "Aborting encryption at second password prompt."		cleanUpAndExit(isEncryptingDirFlag, zipAlreadyExistedFlag, quotedFileToBeEncrypted)	end if		-- Validate the encryption key the user has provided to make sure there aren't any typos.	set encryptionKey to the text returned of encryptionKeyPrompt	if encryptionKey is not equal to the text returned of encryptionKeyConfirmationPrompt then		display dialog "ERROR: Encryption passwords did not match."		log "ERROR: Passwords didn't match"		userExit()	end if		set encryptedFileName to quoted form of (fileToBeEncrypted &amp; "." &amp; hashFile(quoted form of fileToBeEncrypted) &amp; encryptedExtension)	log "Encryption Command: $ openssl enc -aes-256-ctr -salt -in " &amp; quotedFileToBeEncrypted &amp; " -out " &amp; encryptedFileName &amp; " -pass pass:" &amp; encryptionKey	do shell script cdToRightDir &amp; "openssl enc -aes-256-ctr -salt -in " &amp; quotedFileToBeEncrypted &amp; " -out " &amp; encryptedFileName &amp; " -pass pass:" &amp; encryptionKey		changeFileIcon(encryptedFileName)	cleanUpAndExit(isEncryptingDirFlag, zipAlreadyExistedFlag, quotedFileToBeEncrypted)end encryptFile--------- Main-------set encryptedExtension to readValueFromConfig("encryptedFileExtension")tell application "Finder" to set selected_items to selectionrepeat with itemRef in selected_items		-- Get filePath and escape it	set filePath to POSIX path of (itemRef as string)	set quotedAndEscapedPath to quoted form of filePath	log "FilePath: " &amp; filePath		-- Set up cdToRightDir command	set parentDir to do shell script "dirname " &amp; quotedAndEscapedPath	log "ParentDir: " &amp; parentDir	set cdToRightDir to "cd " &amp; quoted form of (parentDir) &amp; " &amp;&amp; "		-- Use filetype to figure out if we need to encrypt or decrypt it.	if getFileType(quotedAndEscapedPath) is equal to "openssl enc'd data with salted password" then		decryptFile(filePath)	else		encryptFile(filePath, parentDir)	end ifend repeat</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>128A615A-9142-40A4-97A2-ED1B7FEECDE3</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>CB06710A-AE2C-4EEA-8CFA-84B1EDA971E7</string>
				<key>ShowWhenRun</key>
				<false/>
				<key>UUID</key>
				<string>9A1A5A9F-F633-45D3-AE8C-DB1CABA4AC11</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>505.250000:368.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.finder</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/System/Library/CoreServices/Finder.app</key>
			<string>com.apple.finder</string>
		</dict>
		<key>applicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/System/Library/CoreServices/Finder.app</string>
		</array>
		<key>backgroundColor</key>
		<data>
		YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVy
		VCR0b3ASAAGGoKoHCBMUFR4kKC8zVSRudWxs1QkKCwwNDg8QERJWJGNsYXNz
		W05TQ29sb3JOYW1lXE5TQ29sb3JTcGFjZV1OU0NhdGFsb2dOYW1lV05TQ29s
		b3KACYADEAaAAoAEVlN5c3RlbV8QD3N5c3RlbUJsdWVDb2xvctUWFwsYCRka
		GxwOXE5TQ29tcG9uZW50c1VOU1JHQl8QEk5TQ3VzdG9tQ29sb3JTcGFjZUcw
		IDAgMSAxTxARMCAwIDAuOTk4MTg4OTcyNQAQAYAFgAnTHyAJISIjVE5TSURV
		TlNJQ0MQB4AGgAjSJQkmJ1dOUy5kYXRhTxEMSAAADEhMaW5vAhAAAG1udHJS
		R0IgWFlaIAfOAAIACQAGADEAAGFjc3BNU0ZUAAAAAElFQyBzUkdCAAAAAAAA
		AAAAAAAAAAD21gABAAAAANMtSFAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWNwcnQAAAFQAAAAM2Rlc2MAAAGE
		AAAAbHd0cHQAAAHwAAAAFGJrcHQAAAIEAAAAFHJYWVoAAAIYAAAAFGdYWVoA
		AAIsAAAAFGJYWVoAAAJAAAAAFGRtbmQAAAJUAAAAcGRtZGQAAALEAAAAiHZ1
		ZWQAAANMAAAAhnZpZXcAAAPUAAAAJGx1bWkAAAP4AAAAFG1lYXMAAAQMAAAA
		JHRlY2gAAAQwAAAADHJUUkMAAAQ8AAAIDGdUUkMAAAQ8AAAIDGJUUkMAAAQ8
		AAAIDHRleHQAAAAAQ29weXJpZ2h0IChjKSAxOTk4IEhld2xldHQtUGFja2Fy
		ZCBDb21wYW55AABkZXNjAAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAA
		AAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAA81EAAQAA
		AAEWzFhZWiAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAG+iAAA49QAAA5BY
		WVogAAAAAAAAYpkAALeFAAAY2lhZWiAAAAAAAAAkoAAAD4QAALbPZGVzYwAA
		AAAAAAAWSUVDIGh0dHA6Ly93d3cuaWVjLmNoAAAAAAAAAAAAAAAWSUVDIGh0
		dHA6Ly93d3cuaWVjLmNoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALklFQyA2MTk2Ni0yLjEgRGVm
		YXVsdCBSR0IgY29sb3VyIHNwYWNlIC0gc1JHQgAAAAAAAAAAAAAALklFQyA2
		MTk2Ni0yLjEgRGVmYXVsdCBSR0IgY29sb3VyIHNwYWNlIC0gc1JHQgAAAAAA
		AAAAAAAAAAAAAAAAAAAAAABkZXNjAAAAAAAAACxSZWZlcmVuY2UgVmlld2lu
		ZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAsUmVmZXJl
		bmNlIFZpZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAdmlldwAAAAAAE6T+ABRfLgAQzxQAA+3MAAQT
		CwADXJ4AAAABWFlaIAAAAAAATAlWAFAAAABXH+dtZWFzAAAAAAAAAAEAAAAA
		AAAAAAAAAAAAAAAAAAACjwAAAAJzaWcgAAAAAENSVCBjdXJ2AAAAAAAABAAA
		AAAFAAoADwAUABkAHgAjACgALQAyADcAOwBAAEUASgBPAFQAWQBeAGMAaABt
		AHIAdwB8AIEAhgCLAJAAlQCaAJ8ApACpAK4AsgC3ALwAwQDGAMsA0ADVANsA
		4ADlAOsA8AD2APsBAQEHAQ0BEwEZAR8BJQErATIBOAE+AUUBTAFSAVkBYAFn
		AW4BdQF8AYMBiwGSAZoBoQGpAbEBuQHBAckB0QHZAeEB6QHyAfoCAwIMAhQC
		HQImAi8COAJBAksCVAJdAmcCcQJ6AoQCjgKYAqICrAK2AsECywLVAuAC6wL1
		AwADCwMWAyEDLQM4A0MDTwNaA2YDcgN+A4oDlgOiA64DugPHA9MD4APsA/kE
		BgQTBCAELQQ7BEgEVQRjBHEEfgSMBJoEqAS2BMQE0wThBPAE/gUNBRwFKwU6
		BUkFWAVnBXcFhgWWBaYFtQXFBdUF5QX2BgYGFgYnBjcGSAZZBmoGewaMBp0G
		rwbABtEG4wb1BwcHGQcrBz0HTwdhB3QHhgeZB6wHvwfSB+UH+AgLCB8IMghG
		CFoIbgiCCJYIqgi+CNII5wj7CRAJJQk6CU8JZAl5CY8JpAm6Cc8J5Qn7ChEK
		Jwo9ClQKagqBCpgKrgrFCtwK8wsLCyILOQtRC2kLgAuYC7ALyAvhC/kMEgwq
		DEMMXAx1DI4MpwzADNkM8w0NDSYNQA1aDXQNjg2pDcMN3g34DhMOLg5JDmQO
		fw6bDrYO0g7uDwkPJQ9BD14Peg+WD7MPzw/sEAkQJhBDEGEQfhCbELkQ1xD1
		ERMRMRFPEW0RjBGqEckR6BIHEiYSRRJkEoQSoxLDEuMTAxMjE0MTYxODE6QT
		xRPlFAYUJxRJFGoUixStFM4U8BUSFTQVVhV4FZsVvRXgFgMWJhZJFmwWjxay
		FtYW+hcdF0EXZReJF64X0hf3GBsYQBhlGIoYrxjVGPoZIBlFGWsZkRm3Gd0a
		BBoqGlEadxqeGsUa7BsUGzsbYxuKG7Ib2hwCHCocUhx7HKMczBz1HR4dRx1w
		HZkdwx3sHhYeQB5qHpQevh7pHxMfPh9pH5Qfvx/qIBUgQSBsIJggxCDwIRwh
		SCF1IaEhziH7IiciVSKCIq8i3SMKIzgjZiOUI8Ij8CQfJE0kfCSrJNolCSU4
		JWgllyXHJfcmJyZXJocmtyboJxgnSSd6J6sn3CgNKD8ocSiiKNQpBik4KWsp
		nSnQKgIqNSpoKpsqzysCKzYraSudK9EsBSw5LG4soizXLQwtQS12Last4S4W
		Lkwugi63Lu4vJC9aL5Evxy/+MDUwbDCkMNsxEjFKMYIxujHyMioyYzKbMtQz
		DTNGM38zuDPxNCs0ZTSeNNg1EzVNNYc1wjX9Njc2cjauNuk3JDdgN5w31zgU
		OFA4jDjIOQU5Qjl/Obw5+To2OnQ6sjrvOy07azuqO+g8JzxlPKQ84z0iPWE9
		oT3gPiA+YD6gPuA/IT9hP6I/4kAjQGRApkDnQSlBakGsQe5CMEJyQrVC90M6
		Q31DwEQDREdEikTORRJFVUWaRd5GIkZnRqtG8Ec1R3tHwEgFSEtIkUjXSR1J
		Y0mpSfBKN0p9SsRLDEtTS5pL4kwqTHJMuk0CTUpNk03cTiVObk63TwBPSU+T
		T91QJ1BxULtRBlFQUZtR5lIxUnxSx1MTU19TqlP2VEJUj1TbVShVdVXCVg9W
		XFapVvdXRFeSV+BYL1h9WMtZGllpWbhaB1pWWqZa9VtFW5Vb5Vw1XIZc1l0n
		XXhdyV4aXmxevV8PX2Ffs2AFYFdgqmD8YU9homH1YklinGLwY0Njl2PrZEBk
		lGTpZT1lkmXnZj1mkmboZz1nk2fpaD9olmjsaUNpmmnxakhqn2r3a09rp2v/
		bFdsr20IbWBtuW4SbmtuxG8eb3hv0XArcIZw4HE6cZVx8HJLcqZzAXNdc7h0
		FHRwdMx1KHWFdeF2Pnabdvh3VnezeBF4bnjMeSp5iXnnekZ6pXsEe2N7wnwh
		fIF84X1BfaF+AX5ifsJ/I3+Ef+WAR4CogQqBa4HNgjCCkoL0g1eDuoQdhICE
		44VHhauGDoZyhteHO4efiASIaYjOiTOJmYn+imSKyoswi5aL/IxjjMqNMY2Y
		jf+OZo7OjzaPnpAGkG6Q1pE/kaiSEZJ6kuOTTZO2lCCUipT0lV+VyZY0lp+X
		Cpd1l+CYTJi4mSSZkJn8mmia1ZtCm6+cHJyJnPedZJ3SnkCerp8dn4uf+qBp
		oNihR6G2oiailqMGo3aj5qRWpMelOKWpphqmi6b9p26n4KhSqMSpN6mpqhyq
		j6sCq3Wr6axcrNCtRK24ri2uoa8Wr4uwALB1sOqxYLHWskuywrM4s660JbSc
		tRO1irYBtnm28Ldot+C4WbjRuUq5wro7urW7LrunvCG8m70VvY++Cr6Evv+/
		er/1wHDA7MFnwePCX8Lbw1jD1MRRxM7FS8XIxkbGw8dBx7/IPci8yTrJuco4
		yrfLNsu2zDXMtc01zbXONs62zzfPuNA50LrRPNG+0j/SwdNE08bUSdTL1U7V
		0dZV1tjXXNfg2GTY6Nls2fHadtr724DcBdyK3RDdlt4c3qLfKd+v4DbgveFE
		4cziU+Lb42Pj6+Rz5PzlhOYN5pbnH+ep6DLovOlG6dDqW+rl63Dr++yG7RHt
		nO4o7rTvQO/M8Fjw5fFy8f/yjPMZ86f0NPTC9VD13vZt9vv3ivgZ+Kj5OPnH
		+lf65/t3/Af8mP0p/br+S/7c/23//4AH0ikqKyxaJGNsYXNzbmFtZVgkY2xh
		c3Nlc11OU011dGFibGVEYXRhoystLlZOU0RhdGFYTlNPYmplY3TSKSowMVxO
		U0NvbG9yU3BhY2WiMi5cTlNDb2xvclNwYWNl0ikqNDVXTlNDb2xvcqI0Ll8Q
		D05TS2V5ZWRBcmNoaXZlctE4OVRyb290gAEACAARABoAIwAtADIANwBCAEgA
		UwBaAGYAcwCBAIkAiwCNAI8AkQCTAJoArAC3AMQAygDfAOcA+wD9AP8BAQEI
		AQ0BEwEVARcBGQEeASYNcg10DXkNhA2NDZsNnw2mDa8NtA3BDcQN0Q3WDd4N
		4Q3zDfYN+wAAAAAAAAIBAAAAAAAAADoAAAAAAAAAAAAAAAAAAA39
		</data>
		<key>backgroundColorName</key>
		<string>systemBlueColor</string>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>15</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.finder</string>
		<key>serviceApplicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
